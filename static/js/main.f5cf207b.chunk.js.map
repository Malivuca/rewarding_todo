{"version":3,"sources":["components/filled-input.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomInput","otherProps","TextField","InputProps","style","backgroundColor","inputProps","color","InputLabelProps","useStyles","makeStyles","theme","createStyles","root","width","maxWidth","palette","background","default","nested","paddingLeft","spacing","button","withStyles","green","checked","props","Checkbox","icon","fontSize","checkedIcon","App","classes","React","useState","open","setOpen","taskName","setTaskName","tasks","setTasks","handleSubmit","e","preventDefault","cloneTasks","push","id","console","log","createTask","length","alert","className","onSubmit","variant","label","value","onChange","el","target","fullWidth","IconButton","type","map","task","index","onClick","newTasks","filter","i","handleDelete","ListItem","ListItemIcon","ListItemText","primary","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5cf207b.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  TextField,\r\n  // eslint-disable-next-line no-unused-vars\r\n  FilledTextFieldProps\r\n} from '@material-ui/core'\r\n\r\nexport const CustomInput: React.FC<FilledTextFieldProps> = ({\r\n  ...otherProps\r\n}: FilledTextFieldProps) => (\r\n  <TextField\r\n    {...otherProps}\r\n    InputProps={{\r\n      style: { backgroundColor: 'var(--primary)' },\r\n      ...otherProps.InputProps\r\n    }}\r\n    inputProps={{ style: { color: 'white' } }}\r\n    InputLabelProps={{\r\n      style: { color: 'grey' },\r\n      ...otherProps.InputLabelProps\r\n    }}\r\n  />\r\n)\r\n","import React from 'react'\n\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  withStyles\n} from '@material-ui/core/styles'\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Collapse,\n  IconButton,\n  Checkbox,\n  InputAdornment\n} from '@material-ui/core'\n\nimport InboxIcon from '@material-ui/icons/MoveToInbox'\nimport ExpandLess from '@material-ui/icons/ExpandLess'\nimport ExpandMore from '@material-ui/icons/ExpandMore'\nimport AddRoundedIcon from '@material-ui/icons/AddRounded'\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded'\nimport EditRoundedIcon from '@material-ui/icons/EditRounded'\nimport MoreHorizRoundedIcon from '@material-ui/icons/MoreHorizRounded'\nimport RadioButtonUncheckedRoundedIcon from '@material-ui/icons/RadioButtonUncheckedRounded'\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded'\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded'\n\nimport { green } from '@material-ui/core/colors'\n\n// import logo from './logo.svg'\nimport './App.scss'\nimport { CustomInput } from './components/filled-input.component'\n\ninterface TaskProps {\n  taskName: string\n  id: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      maxWidth: 700,\n      backgroundColor: theme.palette.background.default\n    },\n    nested: {\n      paddingLeft: theme.spacing(4)\n    },\n    button: {\n      color: 'black'\n    }\n  })\n)\n\nconst CustomColorCheckbox = withStyles({\n  root: {\n    color: 'grey',\n    '&$checked': {\n      color: green[600]\n    }\n  },\n  checked: {}\n})((props) => (\n  <Checkbox\n    color=\"default\"\n    icon={<RadioButtonUncheckedRoundedIcon fontSize=\"small\" />}\n    checkedIcon={<CheckCircleOutlineRoundedIcon fontSize=\"small\" />}\n    {...props}\n  />\n))\n\nconst createTask = (taskName: string, id: number) => {\n  console.log(taskName, id)\n\n  const newTask = { taskName, id }\n\n  return newTask\n}\n\nfunction App() {\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(true)\n\n  const handleClick = () => {\n    setOpen(!open)\n  }\n\n  const [taskName, setTaskName] = React.useState('')\n  const [tasks, setTasks] = React.useState<TaskProps[]>([])\n\n  const handleDelete = (id: number) => {\n    console.log('Deleting task', id)\n\n    // let newTasks = [...tasks].filter((tesk, index) => tesk.props.id !== id)\n\n    const newTasks = [...tasks].filter((task, index) => task.id !== id)\n\n    // Guarantees that the tasks IDs wont be equal after deleting one of them\n    for (let i = id; i < newTasks.length; i++) {\n      newTasks[i].id -= 1\n    }\n\n    console.log(newTasks)\n\n    setTasks(newTasks)\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!taskName) {\n      alert('You didnt type a task!')\n\n      return\n    }\n\n    const cloneTasks = [...tasks]\n\n    cloneTasks.push(createTask(taskName, tasks.length))\n\n    setTasks(cloneTasks)\n\n    setTaskName('')\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Today</h1>\n        <br />\n        <ul className=\"taskList\">\n          <form onSubmit={(e) => handleSubmit(e)}>\n            <li className=\"createTask\">\n              <CustomInput\n                variant=\"filled\"\n                label=\"Create task\"\n                value={taskName}\n                onChange={(el) => setTaskName(el.target.value)}\n                // InputProps={{\n                //   startAdornment: (\n                //     <InputAdornment position=\"start\">\n                //       <AddRoundedIcon />\n                //     </InputAdornment>\n                //   )\n                // }}\n                fullWidth\n              />\n              <div className=\"addAction\">\n                <IconButton type=\"submit\">\n                  <AddCircleRoundedIcon\n                    style={{ color: 'var(--secondary)' }}\n                    fontSize=\"large\"\n                  />\n                </IconButton>\n              </div>\n            </li>\n          </form>\n          {tasks.map((task, index) => (\n            <>\n              <li key={index} className=\"task\">\n                <div className=\"taskBody\">\n                  <div className=\"taskCheck\">\n                    <button>\n                      <RadioButtonUncheckedRoundedIcon\n                        fontSize=\"small\"\n                        style={{ color: 'grey' }}\n                      />\n                    </button>\n                    {/* <CustomColorCheckbox /> */}\n                  </div>\n                  <div className=\"mainText\">{task.taskName}</div>\n                  <div className=\"taskActions\">\n                    <button>\n                      <EditRoundedIcon fontSize=\"small\" />\n                    </button>\n                    <button onClick={() => handleDelete(task.id)}>\n                      <DeleteRoundedIcon fontSize=\"small\" />\n                    </button>\n                    <button>\n                      <MoreHorizRoundedIcon />\n                    </button>\n                  </div>\n                </div>\n              </li>\n              {/* <hr className=\"separator\" /> */}\n            </>\n          ))}\n          <ListItem button onClick={handleClick}>\n            <ListItemIcon>\n              <InboxIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Aprender Japones\" />\n            {open ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              <ListItem button className={classes.nested}>\n                <ListItemText primary=\"Descricao longa lalalallalal\" />\n              </ListItem>\n            </List>\n          </Collapse>\n        </ul>\n      </header>\n    </div>\n    // <div className=\"App\">\n    //  <header className=\"App-header\">\n    //    <div className=\"TaskRow\">\n    //      Sou uma task\n    //      <div className=\"TaskCheck\">\n    //        <button>Check</button>\n    //      </div>\n    //    </div>\n    //  </header>\n    // </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}