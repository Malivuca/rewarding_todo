{"version":3,"sources":["components/filled-input.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomInput","otherProps","TextField","InputProps","style","backgroundColor","inputProps","color","InputLabelProps","useStyles","makeStyles","theme","createStyles","root","width","maxWidth","palette","background","default","nested","paddingLeft","spacing","button","withStyles","green","checked","props","Checkbox","icon","fontSize","checkedIcon","App","React","useState","open","setOpen","handleClick","taskName","setTaskName","newTaskName","setNewTaskName","tasks","setTasks","unsetEdit","id","newTasks","editing","handleSubmit","e","preventDefault","cloneTasks","push","taskDescription","console","log","completed","createTask","length","alert","className","onSubmit","variant","label","value","onChange","el","target","fullWidth","IconButton","type","map","task","index","onClick","rows","handleEdit","stopPropagation","handleComplete","i","setEdit","filter","handleDelete","Collapse","in","timeout","unmountOnExit","paddingBottom","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f137cbbf.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  TextField,\r\n  // eslint-disable-next-line no-unused-vars\r\n  FilledTextFieldProps\r\n} from '@material-ui/core'\r\n\r\nexport const CustomInput: React.FC<FilledTextFieldProps> = ({\r\n  ...otherProps\r\n}: FilledTextFieldProps) => (\r\n  <TextField\r\n    {...otherProps}\r\n    InputProps={{\r\n      style: { backgroundColor: 'var(--primary)' },\r\n      ...otherProps.InputProps\r\n    }}\r\n    inputProps={{ style: { color: 'white' } }}\r\n    InputLabelProps={{\r\n      style: { color: 'grey' },\r\n      ...otherProps.InputLabelProps\r\n    }}\r\n  />\r\n)\r\n","import React from 'react'\n\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  withStyles\n} from '@material-ui/core/styles'\nimport {\n  Collapse,\n  IconButton,\n  Checkbox,\n  InputAdornment,\n  TextField\n} from '@material-ui/core'\n\nimport InboxIcon from '@material-ui/icons/MoveToInbox'\nimport ExpandLess from '@material-ui/icons/ExpandLess'\nimport ExpandMore from '@material-ui/icons/ExpandMore'\nimport AddRoundedIcon from '@material-ui/icons/AddRounded'\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded'\nimport EditRoundedIcon from '@material-ui/icons/EditRounded'\nimport MoreHorizRoundedIcon from '@material-ui/icons/MoreHorizRounded'\nimport RadioButtonUncheckedRoundedIcon from '@material-ui/icons/RadioButtonUncheckedRounded'\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded'\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded'\n\nimport { green } from '@material-ui/core/colors'\n\n// import logo from './logo.svg'\nimport './App.scss'\nimport { CustomInput } from './components/filled-input.component'\n\ninterface TaskProps {\n  id: number\n  taskName: string\n  taskDescription: string\n  completed: boolean\n  editing: boolean\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      maxWidth: 700,\n      backgroundColor: theme.palette.background.default\n    },\n    nested: {\n      paddingLeft: theme.spacing(4)\n    },\n    button: {\n      color: 'black'\n    }\n  })\n)\n\nconst CustomColorCheckbox = withStyles({\n  root: {\n    color: 'grey',\n    '&$checked': {\n      color: green[600]\n    }\n  },\n  checked: {}\n})((props) => (\n  <Checkbox\n    color=\"default\"\n    icon={<RadioButtonUncheckedRoundedIcon fontSize=\"small\" />}\n    checkedIcon={<CheckCircleOutlineRoundedIcon fontSize=\"small\" />}\n    {...props}\n  />\n))\n\nconst createTask = (taskName: string, id: number, taskDescription = '') => {\n  console.log(taskName, id)\n\n  const newTask = {\n    taskName,\n    id,\n    taskDescription,\n    completed: false,\n    editing: false\n  }\n\n  return newTask\n}\n\nfunction App() {\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(true)\n\n  const handleClick = () => {\n    setOpen(!open)\n  }\n\n  const [taskName, setTaskName] = React.useState('')\n  const [newTaskName, setNewTaskName] = React.useState('')\n  const [tasks, setTasks] = React.useState<TaskProps[]>([])\n\n  const handleComplete = (id: number) => {\n    const newTasks = [...tasks]\n\n    newTasks[id].completed = !newTasks[id].completed\n\n    setTasks(newTasks)\n  }\n\n  const setEdit = (id: number) => {\n    const newTasks = [...tasks]\n\n    let i\n\n    for (i = 0; i < newTasks.length; i++) {\n      if (newTasks[i].editing === true) {\n        newTasks[i].editing = false\n\n        break\n      }\n    }\n\n    newTasks[id].editing = true\n\n    setTasks(newTasks)\n  }\n\n  const unsetEdit = (id: number) => {\n    const newTasks = [...tasks]\n\n    newTasks[id].editing = false\n\n    setTasks(newTasks)\n  }\n\n  const handleEdit = (id: number, newTaskName: string) => {\n    if (!newTaskName) {\n      alert('You need to type a task name!')\n\n      return\n    }\n\n    const newTasks = [...tasks]\n\n    newTasks[id].taskName = newTaskName\n\n    setTasks(newTasks)\n\n    unsetEdit(id)\n  }\n  const handleDelete = (id: number) => {\n    console.log('Deleting task', id)\n\n    // let newTasks = [...tasks].filter((tesk, index) => tesk.props.id !== id)\n\n    const newTasks = [...tasks].filter((task, index) => task.id !== id)\n\n    // Guarantees that the tasks IDs wont be equal after deleting one of them\n    for (let i = id; i < newTasks.length; i++) {\n      newTasks[i].id -= 1\n    }\n\n    console.log(newTasks)\n\n    setTasks(newTasks)\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!taskName) {\n      alert('You didnt type a task name!')\n\n      return\n    }\n\n    const cloneTasks = [...tasks]\n\n    cloneTasks.push(createTask(taskName, tasks.length))\n\n    setTasks(cloneTasks)\n\n    setTaskName('')\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Today</h1>\n        <br />\n        <ul className=\"taskList\">\n          <form onSubmit={(e) => handleSubmit(e)}>\n            <li className=\"createTask\">\n              <CustomInput\n                variant=\"filled\"\n                label=\"Create task\"\n                value={taskName}\n                onChange={(el) => setTaskName(el.target.value)}\n                // InputProps={{\n                //   startAdornment: (\n                //     <InputAdornment position=\"start\">\n                //       <AddRoundedIcon />\n                //     </InputAdornment>\n                //   )\n                // }}\n                fullWidth\n              />\n              <div className=\"addAction\">\n                <IconButton type=\"submit\">\n                  <AddCircleRoundedIcon\n                    style={{ color: 'var(--secondary)' }}\n                    fontSize=\"large\"\n                  />\n                </IconButton>\n              </div>\n            </li>\n          </form>\n          {tasks.map((task, index) => (\n            <li key={index} className=\"task\" onClick={handleClick}>\n              {task.editing ? (\n                <div className=\"editTask\">\n                  <div className=\"mainArea\">\n                    <textarea\n                      value={newTaskName}\n                      onChange={(e) => setNewTaskName(e.target.value)}\n                      rows={4}\n                    />\n                  </div>\n                  <div>\n                    <button\n                      className=\"primaryButton\"\n                      onClick={() => handleEdit(task.id, newTaskName)}\n                    >\n                      Save\n                    </button>\n                    <button\n                      className=\"secondaryButton\"\n                      onClick={() => unsetEdit(task.id)}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                  {/* <TextField\n                multiline\n                rows={4}\n                defaultValue=\"Default Value\"\n                variant=\"outlined\"\n                fullWidth\n              /> */}\n                </div>\n              ) : (\n                <>\n                  <div className=\"taskBody\">\n                    <div className=\"taskCheck\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation()\n                          handleComplete(index)\n                        }}\n                      >\n                        <RadioButtonUncheckedRoundedIcon\n                          fontSize=\"small\"\n                          style={\n                            tasks[index].completed\n                              ? { color: 'var(--secondary)' }\n                              : { color: 'grey' }\n                          }\n                        />\n                      </button>\n                      {/* <CustomColorCheckbox /> */}\n                    </div>\n                    <div className=\"mainText\">{task.taskName}</div>\n                    <div className=\"taskActions\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation()\n                          setNewTaskName(task.taskName)\n                          setEdit(index)\n                        }}\n                      >\n                        <EditRoundedIcon fontSize=\"small\" />\n                      </button>\n                      <button onClick={(e) => handleDelete(task.id)}>\n                        <DeleteRoundedIcon fontSize=\"small\" />\n                      </button>\n                      <button>\n                        <MoreHorizRoundedIcon />\n                      </button>\n                    </div>\n                  </div>\n                  {task.taskDescription ? (\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                      <div\n                        style={{\n                          backgroundColor: 'var(--primary)',\n                          paddingLeft: '20px',\n                          paddingBottom: '10px',\n                          textAlign: 'left'\n                        }}\n                      >\n                        Note: {task.taskDescription}\n                      </div>\n                    </Collapse>\n                  ) : null}\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      </header>\n    </div>\n    // <div className=\"App\">\n    //  <header className=\"App-header\">\n    //    <div className=\"TaskRow\">\n    //      Sou uma task\n    //      <div className=\"TaskCheck\">\n    //        <button>Check</button>\n    //      </div>\n    //    </div>\n    //  </header>\n    // </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}